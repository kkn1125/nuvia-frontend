---
description: 'MUI와 React 등 라이브러리 사용 시 최신 버전 기준으로 deprecated된 props를 최신 버전에 맞게 업데이트하여 코딩'
globs: ['**/*.tsx', '**/*.ts', '**/*.jsx', '**/*.js']
alwaysApply: true
---

# Next.js 모범 사례

## 프로젝트 구조

- App Router 디렉토리 구조 사용
- 라우트별 컴포넌트는 `app` 디렉토리에 배치
- 공유 컴포넌트는 `components` 디렉토리에 배치
- 유틸리티와 헬퍼는 `lib` 디렉토리에 배치
- 디렉토리명은 소문자와 대시 사용 (예: `components/auth-wizard`)

## 컴포넌트

- 기본적으로 Server Components 사용
- Client 컴포넌트는 'use client'로 명시적 표시
- Client 컴포넌트는 Suspense로 감싸고 fallback 제공
- 중요하지 않은 컴포넌트는 동적 로딩 사용
- 적절한 에러 바운더리 구현
- 정적 콘텐츠와 인터페이스는 파일 끝에 배치

## 성능

- 이미지 최적화: WebP 형식, 크기 데이터, 지연 로딩 사용
- 'useEffect'와 'setState' 사용 최소화
- 가능한 경우 Server Components (RSC) 선호
- 중요하지 않은 컴포넌트는 동적 로딩 사용
- 적절한 캐싱 전략 구현

## 데이터 페칭

- 가능한 경우 Server Components에서 데이터 페칭
- 데이터 페칭에 대한 적절한 에러 처리 구현
- 적절한 캐싱 전략 사용
- 로딩 및 에러 상태 적절히 처리

## 라우팅

- App Router 규칙 사용
- 라우트에 대한 적절한 로딩 및 에러 상태 구현
- 동적 라우트 적절히 사용
- 필요시 병렬 라우트 처리

## 폼과 유효성 검사

- 폼 유효성 검사에 Zod 사용
- 적절한 서버 사이드 유효성 검사 구현
- 폼 에러 적절히 처리
- 폼 제출 중 로딩 상태 표시

## 상태 관리

- 클라이언트 사이드 상태 최소화
- React Context 사용 자제
- 가능한 경우 서버 상태 선호
- 적절한 로딩 상태 구현

## MUI 최신 버전 규칙

### 컴포넌트 작성 규칙

- 최신 버전을 기준으로 작성
- deprecated된 props나 API를 최신 버전에 맞게 업데이트
- `InputProps` 대신 `slotProps.input` 사용
- 이외 deprecated된 속성은 최신 버전에 맞게 사용
